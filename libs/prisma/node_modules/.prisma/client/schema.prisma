// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserModel {
  id               Int                @id @default(autoincrement())
  email            String             @unique
  name             String             @db.VarChar(30)
  surname          String?
  password         String
  isVendor         Boolean
  hashedToken      String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  roles            UsersOnRoles[]
  products         ProductModel[]
  cart             CartModel?
  isEmailConfirmed Boolean?
  addresses        AddressModel[]
  userOrders       UserOrderModel[]
  vendorOrders     VendorOrderModel[]
}

model AddressModel {
  id           String             @id
  name         String
  surname      String
  address      String
  phone        String
  user         UserModel          @relation(fields: [userId], references: [id])
  userId       Int
  vendorOrders VendorOrderModel[]
  userOrders   UserOrderModel[]
}

model RoleModel {
  id          Int            @id @default(autoincrement())
  value       RoleType       @unique
  description String         @db.VarChar(140)
  users       UsersOnRoles[]
}

model UsersOnRoles {
  user   UserModel @relation(fields: [userId], references: [id])
  userId Int
  role   RoleModel @relation(fields: [roleId], references: [id])
  roleId Int

  @@id([userId, roleId])
}

enum RoleType {
  ADMIN
  BYIER
  VENDOR
  MODERATOR
}

model ProductModel {
  id          String          @id
  name        String          @db.VarChar(40)
  description String
  status      ProductStatus   @default(DRAFT)
  vendor      UserModel       @relation(fields: [vendorId], references: [id])
  vendorId    Int
  category    CategoryModel   @relation(fields: [categoryId], references: [id])
  categoryId  Int
  slug        String          @unique
  price       Decimal         @db.Decimal(9, 2)
  amount      Int             @default(1)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  images      ImageModel[]
  carts       CartOnProduct[]
  orderItem   OrderItemModel?
}

enum ProductStatus {
  DRAFT
  MODERATION
  WAITING
  PUBLISHED
  ORDERED
  SOLD
  ARCHIVED
}

model CategoryModel {
  id       Int            @id @default(autoincrement())
  name     String         @unique
  icon     String?
  bucket   String?
  mime     String?
  slug     String         @unique
  products ProductModel[]
}

model ImageModel {
  id        String       @id
  url       String
  isMain    Boolean      @default(false)
  product   ProductModel @relation(fields: [productId], references: [id])
  productId String
}

model CartModel {
  id        String          @id
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  user      UserModel?      @relation(fields: [userId], references: [id])
  userId    Int?            @unique
  products  CartOnProduct[]
}

model CartOnProduct {
  cart      CartModel    @relation(fields: [cartId], references: [id])
  cartId    String
  product   ProductModel @relation(fields: [productId], references: [id])
  productId String

  @@id([cartId, productId])
}

enum UserOrderStatus {
  PAID
  UNPAID
  CANCELED
}

model UserOrderModel {
  id           String             @id
  status       UserOrderStatus    @default(UNPAID)
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  user         UserModel?         @relation(fields: [userId], references: [id])
  userId       Int?               @unique
  address      AddressModel?      @relation(fields: [addressId], references: [id])
  addressId    String
  vendorOrders VendorOrderModel[]
}

enum VendorOrderStatus {
  CREATED
  PREPARATION
  SHIPPED
  RECIEVED
  RETURNED
}

model VendorOrderModel {
  id          String            @id
  status      VendorOrderStatus @default(CREATED)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  user        UserModel?        @relation(fields: [userId], references: [id])
  userId      Int?              @unique
  address     AddressModel?     @relation(fields: [addressId], references: [id])
  addressId   String
  userOrder   UserOrderModel    @relation(fields: [userOrderId], references: [id])
  userOrderId String
  orderItems  OrderItemModel[]
}

model OrderItemModel {
  id            String           @id
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  vendorOrder   VendorOrderModel @relation(fields: [vendorOrderId], references: [id])
  vendorOrderId String
  productModel  ProductModel     @relation(fields: [productId], references: [id])
  productId     String           @unique
  price         Decimal          @db.Decimal(9, 2)
}
