
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 3.10.0
 * Query Engine version: 73e60b76d394f8d37d8ebd1f8918c79029f0db86
 */
Prisma.prismaVersion = {
  client: "3.10.0",
  engine: "73e60b76d394f8d37d8ebd1f8918c79029f0db86"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = 'DbNull'
Prisma.JsonNull = 'JsonNull'
Prisma.AnyNull = 'AnyNull'

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.UserModelScalarFieldEnum = makeEnum({
  id: 'id',
  email: 'email',
  name: 'name',
  surname: 'surname',
  password: 'password',
  isVendor: 'isVendor',
  hashedToken: 'hashedToken',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isEmailConfirmed: 'isEmailConfirmed'
});

exports.Prisma.AddressModelScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  surname: 'surname',
  address: 'address',
  phone: 'phone',
  userId: 'userId'
});

exports.Prisma.RoleModelScalarFieldEnum = makeEnum({
  id: 'id',
  value: 'value',
  description: 'description'
});

exports.Prisma.UsersOnRolesScalarFieldEnum = makeEnum({
  userId: 'userId',
  roleId: 'roleId'
});

exports.Prisma.ProductModelScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  description: 'description',
  status: 'status',
  vendorId: 'vendorId',
  categoryId: 'categoryId',
  slug: 'slug',
  price: 'price',
  amount: 'amount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.CategoryModelScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  icon: 'icon',
  bucket: 'bucket',
  mime: 'mime',
  slug: 'slug'
});

exports.Prisma.ImageModelScalarFieldEnum = makeEnum({
  id: 'id',
  url: 'url',
  isMain: 'isMain',
  productId: 'productId'
});

exports.Prisma.CartModelScalarFieldEnum = makeEnum({
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId'
});

exports.Prisma.CartOnProductScalarFieldEnum = makeEnum({
  cartId: 'cartId',
  productId: 'productId'
});

exports.Prisma.UserOrderModelScalarFieldEnum = makeEnum({
  id: 'id',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId',
  addressId: 'addressId'
});

exports.Prisma.VendorOrderModelScalarFieldEnum = makeEnum({
  id: 'id',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId',
  addressId: 'addressId',
  userOrderId: 'userOrderId'
});

exports.Prisma.OrderItemModelScalarFieldEnum = makeEnum({
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  vendorOrderId: 'vendorOrderId',
  productId: 'productId',
  price: 'price'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});
exports.RoleType = makeEnum({
  ADMIN: 'ADMIN',
  BYIER: 'BYIER',
  VENDOR: 'VENDOR',
  MODERATOR: 'MODERATOR'
});

exports.ProductStatus = makeEnum({
  DRAFT: 'DRAFT',
  MODERATION: 'MODERATION',
  WAITING: 'WAITING',
  PUBLISHED: 'PUBLISHED',
  ORDERED: 'ORDERED',
  SOLD: 'SOLD',
  ARCHIVED: 'ARCHIVED'
});

exports.UserOrderStatus = makeEnum({
  PAID: 'PAID',
  UNPAID: 'UNPAID',
  CANCELED: 'CANCELED'
});

exports.VendorOrderStatus = makeEnum({
  CREATED: 'CREATED',
  PREPARATION: 'PREPARATION',
  SHIPPED: 'SHIPPED',
  RECIEVED: 'RECIEVED',
  RETURNED: 'RETURNED'
});

exports.Prisma.ModelName = makeEnum({
  UserModel: 'UserModel',
  AddressModel: 'AddressModel',
  RoleModel: 'RoleModel',
  UsersOnRoles: 'UsersOnRoles',
  ProductModel: 'ProductModel',
  CategoryModel: 'CategoryModel',
  ImageModel: 'ImageModel',
  CartModel: 'CartModel',
  CartOnProduct: 'CartOnProduct',
  UserOrderModel: 'UserOrderModel',
  VendorOrderModel: 'VendorOrderModel',
  OrderItemModel: 'OrderItemModel'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
